<?php

declare(strict_types=1);

namespace TimeBuddy;

class Time
{
    public const SECOND = 1;
    public const MINUTE = 60;
    public const HOUR   = 3600;
    public const DAY    = 86400;

    private const DEFAULT_LOCALE = 'en_US';

    /** @var \DateTimeImmutable */
    private $time;
    /** @var \TimeBuddy\Provider\Text */
    private $textProvider;

    public static function createFromDateTime(\DateTime $dateTime) : self
    {
        return new self(\DateTimeImmutable::createFromMutable($dateTime));
    }

    public static function createFromUnixTstamp(int $unixTimestamp) : self
    {
        return new self(new \DateTimeImmutable("@{$unixTimestamp}"));
    }

    /**
     * Time is a construct.
     */
    public function __construct(?\DateTimeImmutable $immutable = null)
    {
        $defaultProvider = $this->getTextProviderInstance();
        if ($defaultProvider === null) {
            throw new \RuntimeException('Default en_US provider could not be loaded');
        }
        $this->textProvider = $defaultProvider;

        if ($immutable !== null) {
            $this->time = $immutable;

            return;
        }

        $this->time = new \DateTimeImmutable('@' . time());
    }

    /**
     * Sets a locale to be used when translating strings generated by format()
     */
    public function setLocale(string $locale) : void
    {
        $textProvider = $this->getTextProviderInstance($locale);
        if ($textProvider === null) {
            throw new \InvalidArgumentException('Invalid locale ' . $locale . '. Check available ones at src/Provider');
        }
        $this->textProvider = $textProvider;
    }

    /**
     * Returns the date formatted as an Unix timestamp
     */
    public function getUnixTimestamp() : int
    {
        return $this->time->getTimestamp();
    }

    /**
     * Returns year value
     */
    public function getYear() : string
    {
        return date('Y', $this->getUnixTimestamp());
    }

    /**
     * Returns month value between 01 and 12 (with leading zeros)
     */
    public function getMonth() : string
    {
        return date('m', $this->getUnixTimestamp());
    }

    /**
     * Returns day value between 01 and 31 (with leading zeros)
     */
    public function getDay() : string
    {
        return date('d', $this->getUnixTimestamp());
    }

    /**
     * Returns day value between 1 and 31 (without leading zeros)
     */
    public function getDayNoZero() : string
    {
        return date('j', $this->getUnixTimestamp());
    }

    /**
     * Returns hour value between 00 and 23 (with leading zeros)
     */
    public function getHours() : string
    {
        return date('H', $this->getUnixTimestamp());
    }

    /**
     * Returns minute value between 00 and 59 (with leading zeros)
     */
    public function getMinutes() : string
    {
        return date('i', $this->getUnixTimestamp());
    }

    /**
     * Returns second value between 00 and 59 (with leading zeros)
     */
    public function getSeconds() : string
    {
        return date('s', $this->getUnixTimestamp());
    }

    /**
     * Adds seconds to the current value
     */
    public function add(int $seconds) : self
    {
        $newTime = $this->getUnixTimestamp() + $seconds;

        return self::createFromUnixTstamp($newTime);
    }

    /**
     * Subtracts seconds from the current value
     */
    public function subtract(int $seconds) : self
    {
        $newTime = $this->getUnixTimestamp() - $seconds;

        return self::createFromUnixTstamp($newTime);
    }

    /**
     * Calculates the absolute difference between the stored time and the $time parameter and
     * returns a {@see DateInterval} object representing it
     */
    public function diff(Time $time) : DateInterval
    {
        return DateInterval::createFromTime($this, $time);
    }

    /**
     * This method transforms the stored time variable in a string according to the informed mask
     * Ex: Mask -> 'Y/m/d % H' results in '2010/02/15 % 02'
     *
     * @param string $mask String mask that will be used to format the time.
     * @return string formatted date
     *
     * @see http://www.php.net/manual/en/function.date.php </p>
     */
    public function format(string $mask) : string
    {
        //First we swap the original format patterns with temporary glyphs
        $patterns     = ['/D/', '/l/', '/M/', '/F/'];
        $replacements = ['##', 'qq', '%%', '}}'];
        $mask         = preg_replace($patterns, $replacements, $mask);

        if ($mask === null) {
            throw new \RuntimeException('Something went wrong when formatting with mask ' . $mask);
        }

        $mask         = date($mask, $this->getUnixTimestamp());
        $patterns     = ['/##/', '/qq/', '/%%/', '/}}/'];
        $replacements = [
            $this->textProvider->weekAbbr($this->time),
            $this->textProvider->week($this->time),
            $this->textProvider->monthAbbr($this->time),
            $this->textProvider->month($this->time),
        ];

        $formattedTime = preg_replace($patterns, $replacements, $mask);

        if ($formattedTime === null) {
            throw new \RuntimeException('Something went wrong when formatting with mask ' . $mask);
        }

        return $formattedTime;
    }

    private function getTextProviderInstance(string $locale = self::DEFAULT_LOCALE) : ?Provider\Text
    {
        $providerClass = 'TimeBuddy\\' . sprintf('Provider\%s\Text', $locale);
        if (class_exists($providerClass, true)) {
            return new $providerClass();
        }

        return null;
    }
}
